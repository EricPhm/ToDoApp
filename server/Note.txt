
------for normal express app------
install package-lock json
    npm init -y

-change main from index.js to server.js

- to run: npm run dev

install express
    npm i express



install nodemon to render automatically instead of end and run again
    npm i nodemon -D
-> update script in package.json, server bc server.js
    -   "start": "node server",
    -   "dev": "nodemon server"


install cors for other to get access to server api
    npm i cors

                                     
-- add my sql
    npm install mysql2

--install dotenv so that it can run the application
    npm i dotenv
===================================================================================================
------for express generator app ------

-- install Express Generator: NOTICE
    Open your terminal or command prompt and run the following npm command to install Express Generator 
    globally on your system:
    npm install -g express-generator
    This command will install the Express application generator globally, allowing you to use it from any directory.



-- install nodemon to render automatically instead of end and run again
    npm i -D nodemon livereload connect-livereload
-> update script in package.json, server bc server.js
    "scripts": {
        "start": "node ./bin/www",
        "watch": "nodemon --ext *"
    },
-> update in app.js
    var livereload = require("livereload");
    var connectLiveReload = require("connect-livereload");

    const liveReloadServer = livereload.createServer();
    liveReloadServer.server.once("connection", () => {
    setTimeout(() => {
        liveReloadServer.refresh("/");
    }, 100);
    });

    app.use(connectLiveReload());


-- install cors for other to get access to server api
    npm i cors


-- add my sql
    npm install mysql2


--install dotenv so that it can run the application
    npm i dotenv



== create own user and password
== it perform a one-way hash of your passwords.
--install bcrypt to encrypt the password
    npm install bcrypt

== use UUID to generate random 128-bit unique identifier for token 
-- use this token in cookie for auth token
    npm install uuid
// import to code
    const { v4: uuidv4 } = require('uuid');

======================

if loggedin, client have the userName
--> then for every request that need to be loggedin
--> client can send the userName
OR
--> check from the userIdsByAuthToken



1. How Cookies Work: need withCredential: true
Client-Side Storage: Cookies are stored on the client-side (i.e., in the user's browser), not on the server. Each user has their own set of cookies.
Request Scope: When a user makes a request to the server, their browser sends the cookies that belong to that particular domain. This means that each user only sends their own cookies with each request.
2. req.cookies.AuthToken:
Per-User Cookie: req.cookies.AuthToken will only contain the token for the user making the request. Itâ€™s not shared across users.
Unique Token per User: When each user logs in, a unique token is generated and stored in their own browser as a cookie. The server identifies the user by checking this token when the user makes requests.
3. How the Logout Process Works:
Token Validation: When a user tries to log out, the server checks the token sent in the request (req.body.userToken) against the token stored in the cookie (req.cookies.AuthToken) for that specific user.
Clear Cookie: res.clearCookie('AuthToken') only clears the AuthToken cookie for the user who made the request, not for all users. Each user's browser will only clear its own cookie.
Server-Side Cache: If you store tokens server-side (e.g., in auth_token_cache), the token corresponding to the specific user is deleted when they log out.
4. Summary of How It Knows Which Token to Compare:
Per-User Isolation: Since cookies are stored on the client side, each user only has access to their own AuthToken. The server only sees the token for the user making the request.
Request Isolation: Each request comes with the specific cookies for that user, and the server compares the token stored in the user's cookie (req.cookies.AuthToken) with the token sent in the request body (req.body.userToken).
5. Example Workflow:
User A logs in and gets a token TokenA stored in their browser's cookies.
User B logs in and gets a different token TokenB stored in their browser's cookies.
When User A logs out, the server compares TokenA (from req.body.userToken) with TokenA (from req.cookies.AuthToken) and clears User A's AuthToken cookie.
User B is unaffected, as their TokenB is separate and stored in their own browser's cookies.
Conclusion:
Cookies Are User-Specific: The server handles each user's cookies individually. When res.clearCookie('AuthToken') is called, it only affects the user who made the request.
Server-Side Comparisons: The server compares the token provided in the request with the token stored in the cookie for that specific user, ensuring that each user's session is managed separately.]


--2 ways for cookies: 
-> Header { "Authorization": "Bearer${token}" } - using local storage to store the token
-> cookies: {withCredential: true} - auto store in cookies 
